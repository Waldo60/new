#!/bin/bash
#colores
lor1='\033[1;31m';lor2='\033[1;32m';lor3='\033[1;33m';lor4='\033[1;34m';lor5='\033[1;35m';lor6='\033[1;36m';lor7='\033[1;37m'
IP=$(wget -qO- whatismyip.akamai.com)
[[ "$IP" = "" ]]&& IP="errorp"
clear
else
echo -e "${lor4}***********************************${lor7}"
echo -e
echo -e "\033[97m    â—† ACCESO NO AUTORIZADO CONTACTAME PARA ACCESOS"
echo -e "\033[97m    â—† TELEGRAM: @Eldiablolucifer2020"
echo -e "\033[97m    â—† WHATSAPP: +52 2292453056"
echo -e
echo -e "${lor4}***********************************${lor7}"
for pid in $(pgrep python);do
kill $pid
done
exit
exit 0
fi
if [ $(id -u) -eq 0 ];then
clear
else
echo -e "Run the script as user${lor2}root${lor7}"
exit
fi 
[ -f /usr/bin/vps-mx ]&&echo -e "${lor1}THIRD PARTY SCRIPT DETECTED"&& exit
[ -f /usr/bin/adm ]&&echo -e "${lor1}THIRD PARTY SCRIPT DETECTED"&& exit 
[ -f /bin/menu ]&&echo -e "${lor1}THIRD PARTY SCRIPT DETECTED"&& exit 
[ -f /etc/newadm/menu ]&&echo -e "${lor1}THIRD PARTY SCRIPT DETECTED"&& exit 
fun_bar () {
          comando[0]="$1"
          comando[1]="$2"
          (
          [[ -e $HOME/fim ]] && rm $HOME/fim
          ${comando[0]} > /dev/null 2>&1
          ${comando[1]} > /dev/null 2>&1
          touch $HOME/fim
          ) > /dev/null 2>&1 &
          tput civis
		  echo -e "${lor7}---------------------------------------------------${lor7}"
          echo -ne "${lor7}    WAIT..${lor1}["
          while true; do
          for((i=0; i<18; i++)); do
          echo -ne "${lor5}#"
          sleep 0.2s
          done
         [[ -e $HOME/fim ]] && rm $HOME/fim && break
         echo -e "${col5}"
         sleep 1s
         tput cuu1
         tput dl1
         echo -ne "${lor7}    WAIT..${lor1}["
         done
         echo -e "${lor1}]${lor7} -${lor7} FINISHED ${lor7}"
         tput cnorm
		 echo -e "${lor7}---------------------------------------------------${lor7}"
        }
b="++++++___           _              _ _ _ 
+++++/ _ \_ __ ___ | |_ ___   /\ /(_) | |
++++/ /_)/ '__/ _ \| __/ _ \ / //_/ | | |
+++/ ___/| | | (_) | || (_) / __ \| | | |
+++\/    |_|  \___/ \__\___/\/  \/|_|_|_|"

espe () {   
echo -e "${lor7}"
read -p " Enter to Continue.."
}  
while true; do
clear&&clear
cd /root/ 
if netstat -nltp|grep 'badvpn-udpgw' > /dev/null; then
badudp=$(netstat -nplt |grep 'badvpn-udpgw' | awk -F ":" {'print $2'} | cut -d " " -f 1 | xargs)
else
badudp=$(echo -e "${lor1}not available")
fi 
if netstat -nltp|grep 'dropbear' > /dev/null; then
drobp=$(netstat -nplt |grep 'dropbear' | awk -F ":" {'print $2'} | cut -d " " -f 1 | xargs)
else
drobp=$(echo -e "${lor1}not available")
fi 
if netstat -nltp|grep 'python' > /dev/null; then
pyho=$(netstat -nplt |grep 'python' | awk -F ":" {'print $2'} | cut -d " " -f 1 | xargs)
else
pyho=$(echo -e "${lor1}not available")
fi  
if netstat -nltp|grep 'stunnel4' > /dev/null; then
ssl=$(netstat -nplt |grep 'stunnel4' | awk -F ":" {'print $2'} | cut -d " " -f 1 | xargs)
else
ssl=$(echo -e "${lor1}not available")
fi 
if ps x | grep -w dns-server | grep -v grep 1>/dev/null 2>/dev/null; then 
slowdnsser=$(echo -e "${lor2}ON")
else
slowdnsser=$(echo -e "${lor1}OFF")
fi
if netstat -nltp|grep 'v2raypro' > /dev/null; then
v2ra=$(netstat -nplt |grep 'v2raypro' | awk -F ":::" {'print $2'} | cut -d " " -f 1 | xargs)
else
v2ra=$(echo -e "${lor1}OFF ")
fi

echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}   Group |${lor7} ðŸŒ€COMPUMUNDO HIPER MEGARED ðŸŒŽðŸ˜‚     "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”${lor5}â€”â€”â€”â€”â€”â€”â€”â€”â€”${lor1}â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor6}   BADVPN:${lor7} $badudp ${lor5}| ${lor6}SLOWDNS: $slowdnsser ${lor5}| ${lor6}V2RAY:${lor7} ${v2ra} "
echo -e "${lor6}   DROPBEAR:${lor7} $drobp "
echo -e "${lor6}   PYTHON:${lor7} $pyho  "
echo -e "${lor6}   SSL:${lor7}    $ssl "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”${lor5}â€”â€”â€”â€”â€”â€”â€”â€”â€”${lor1}â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} SEE SSH CONNECTORS "
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} USER RECORDS  "
echo -e "${lor7}[${lor2}3${lor7}] ${lor3}==>${lor7} SYSTEM INFORMATION "
echo -e "${lor7}[${lor2}4${lor7}] ${lor3}==>${lor7} ADD / REMOVE / RENEW USERS"
echo -e "${lor7}-----------------${lor2}PROTOCOLS & TOOLS${lor7}-----------------${lor7}"
echo -e "${lor7}[${lor2}5${lor7}] ${lor3}==>${lor7} INSTALL PROTOCOLS "
echo -e "${lor7}[${lor2}6${lor7}] ${lor3}==>${lor7} MORE TOOLS "
echo -e "${lor7}-----------------------${lor2}EXTRAS${lor7}----------------------${lor7}"
echo -e "${lor7}[${lor2}7${lor7}] ${lor3}==>${lor7} CREDITS "
echo -e "${lor7}[${lor2}8${lor7}] ${lor3}==>${lor7} EXIT THE PANEL "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
unset opc
while [[ -z ${opc} ]]; do	
read -p "SELECT OPTION :" opc
tput cuu1
tput dl1
done
case $opc in

1)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                  SEE SSH CONNECTORS "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
data="/etc/prokill/database"
tmp_now=$(printf '%(%H%M%S)T\n')
fundrop () {
port_dropbear=`ps aux | grep dropbear | awk NR==1 | awk '{print $17;}'`
log=/var/log/auth.log
loginsukses='Password auth succeeded'
clear
pids=`ps ax |grep dropbear |grep  " $port_dropbear" |awk -F" " '{print $1}'`
for pid in $pids
do
pidlogs=`grep $pid $log |grep "$loginsukses" |awk -F" " '{print $3}'`
i=0
for pidend in $pidlogs
do
let i=i+1
done
    if [ $pidend ];then
       login=`grep $pid $log |grep "$pidend" |grep "$loginsukses"`
       PID=$pid
       user=`echo $login |awk -F" " '{print $10}' | sed -r "s/'/ /g"`
       gph=`echo $login |awk -F" " '{print $2"-"$1,$3}'`
       while [ ${#gph} -lt 13 ]; do
           gph=$gph" "
       done
       while [ ${#user} -lt 16 ]; do
           user=$user" "
       done
       while [ ${#PID} -lt 8 ]; do
           PID=$PID" "
       done
       echo "$user $PID $gph"
    fi
done
}
echo -e "${lor7}      Users      Connection     Time Connects   "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"

 while read usline
    do  
        user="$(echo $usline | cut -d' ' -f1)"
        if [ "$(cat /etc/passwd| grep -w $user| wc -l)" = "1" ]; then
          sqd="$(ps -u $user | grep sshd | wc -l)"
        else
          sqd=00
        fi
        [[ "$sqd" = "" ]] && sqd=0
        if [[ -e /etc/openvpn/openvpn-status.log ]]; then
          ovp="$(cat /etc/openvpn/openvpn-status.log | grep -E ,"$user", | wc -l)"
        else
          ovp=0
        fi
        if netstat -nltp|grep 'dropbear'> /dev/null;then
          drop="$(fundrop | grep "$user" | wc -l)"
        else
          drop=0
        fi
        cnx=$(($sqd + $drop))
        conec=$(($cnx + $ovp))
        if [[ $cnx -gt 0 ]]; then
          tst="$(ps -o etime $(ps -u $user |grep sshd |awk 'NR==1 {print $1}')|awk 'NR==2 {print $1}')"
          tst1=$(echo "$tst" | wc -c)
        if [[ "$tst1" == "9" ]]; then 
          timerg="$(ps -o etime $(ps -u $user |grep sshd |awk 'NR==1 {print $1}')|awk 'NR==2 {print $1}')"
        else
          timerg="$(echo "00:$tst")"
        fi
        elif [[ $ovp -gt 0 ]]; then
          tmp2=$(printf '%(%H:%M:%S)T\n')
          tmp1="$(grep -w "$user" /etc/openvpn/openvpn-status.log |awk '{print $4}'| head -1)"
          [[ "$tmp1" = "" ]] && tmp1="00:00:00" && tmp2="00:00:00"
          var1=`echo $tmp1 | cut -c 1-2`
          var2=`echo $tmp1 | cut -c 4-5`
          var3=`echo $tmp1 | cut -c 7-8`
          var4=`echo $tmp2 | cut -c 1-2`
          var5=`echo $tmp2 | cut -c 4-5`
          var6=`echo $tmp2 | cut -c 7-8`
          calc1=`echo $var1*3600 + $var2*60 + $var3 | bc`
          calc2=`echo $var4*3600 + $var5*60 + $var6 | bc`
          seg=$(($calc2 - $calc1))
          min=$(($seg/60))
          seg=$(($seg-$min*60))
          hor=$(($min/60))
          min=$(($min-$hor*60))
          timerusr=`printf "%02d:%02d:%02d \n" $hor $min $seg;`
          timerg=$(echo "$timerusr" | sed -e 's/[^0-9:]//ig' )
        else
          timerg="00:00:00"
        fi
		while [[ ${#user} -lt 13 ]]; do
        user=$user" "
        done
		while [[ ${#conec} -lt 12 ]]; do
        conec=$conec" "
        done		
        if [[ $conec -eq 0 ]]; then
        
           echo -e "${lor1}    $user    ${lor7}$conec  $timerg "
        else
           echo -e "${lor2}    $user    ${lor7}$conec  $timerg "
        fi
        echo -e "${lor6}---------------------------------------------------${lor7}"
    done < "$data"
espe	
;;
2)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                    USER RECORDS  "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} OPENSSH "
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} V2RAY   "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opc0
if [ "$opc0" = "1" ];then
clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                USER RECORDS OPENSSH "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor7}   USER      PASSWORD       DATE      RESTAURANT "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
VPSsec=$(date +%s)
touch /etc/prokill/database
data="/etc/prokill/database"
RETURN="$(cat $data|cut -d'|' -f1)"
USERS="$(cat $data|cut -d'|' -f1)"
while read hostreturn ; do
DateExp="$(cat /etc/prokill/database|grep -w "$hostreturn"|cut -d'|' -f3)"
if [[ ! -z $DateExp ]]; then             
DataSec=$(date +%s --date="$DateExp")
[[ "$VPSsec" -gt "$DataSec" ]] && EXPTIME="\e[91m[EXPIRED]\e[97m" || EXPTIME="\e[92m$(($(($DataSec - $VPSsec)) / 86400)) Days"
else
EXPTIME="\e[91m[ S/R ]"
fi 
pass="$(cat /etc/prokill/database|grep -w "$hostreturn"|cut -d'|' -f2)"
 while [[ ${#hostreturn} -lt 10 ]]; do
 hostreturn=$hostreturn" "
 done
 while [[ ${#pass} -lt 10 ]]; do
 pass=$pass" "
 done
 while [[ ${#DateExp} -lt 15 ]]; do
 DateExp=$DateExp" "
 done
 while [[ ${#EXPTIME} -lt 15 ]]; do
 EXPTIME=$EXPTIME" "
 done 
echo -e "\e[97m $hostreturn $pass ${lor3}$DateExp $EXPTIME"
echo -e "${lor6}---------------------------------------------------${lor7}"
done <<< "$USERS"
fi

if [ "$opc0" = "2" ];then
clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                 USER RECORDS V2RAY "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
VPSsec=$(date +%s)
touch /etc/prokill/RegV2ray
data="/etc/prokill/RegV2ray"
cat /etc/prokill/RegV2ray |tr '\n' ' ' >/tmp/vx && cat /tmp/vx > /etc/prokill/RegV2ray

RETURN="$(cat $data|cut -d'|' -f2)"
IDEUUID="$(cat $data|cut -d'|' -f1)"
if [[ -z $RETURN ]]; then
echo -e "${lor1}                 NO REGISTERED USERS "
else
while read hostreturn ; do
DateExp="$(cat /etc/prokill/RegV2ray|grep -w "$hostreturn"|cut -d'|' -f3| tr '\n' ' ')"
if [[ ! -z $DateExp ]]; then             
DataSec=$(date +%s --date="$DateExp")
[[ "$VPSsec" -gt "$DataSec" ]] && EXPTIME="\e[91m[EXPIRED]\e[97m" || EXPTIME="\e[92m$(($(($DataSec - $VPSsec)) / 86400)) Days"
else
EXPTIME="\e[91m[ S/R ]"
fi 
usris="$(cat /etc/prokill/RegV2ray|grep -w "$hostreturn"|cut -d'|' -f2| tr '\n' ' ')" 
echo -e "${lor3}UUID :${lor7}$hostreturn "
echo -e "${lor3}USER :${lor7}$usris ${lor1}|${lor2}DATE :${lor7}$DateExp"
echo -e "${lor6}---------------------------------------------------${lor7}"
done <<< "$IDEUUID"

fi

fi
espe
;;

3)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                 SYSTEM INFORMATION  "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
if [ -f /etc/lsb-release ];then
echo -e "${lor3} OPERATING SYSTEM "
echo 
name=$(cat /etc/lsb-release |grep DESCRIPTION |awk -F = {'print $2'})
codename=$(cat /etc/lsb-release |grep CODENAME |awk -F = {'print $2'})
echo -e "${lor6}Nombre: ${lor7}$name"
echo -e "${lor6}CodeName: ${lor7}$codename"
echo -e "${lor6}Kernel: ${lor7}$(uname -s)"
echo -e "${lor6}Kernel Release: ${lor7}$(uname -r)"
if [ -f /etc/os-release ]
then
devlike=$(cat /etc/os-release |grep LIKE |awk -F = {'print $2'})
echo -e "${lor6}Derived from OS: \033[1;37m$devlike"
echo ""
fi
else
system=$(cat /etc/issue.net)
echo -e "${lor3} OPERATING SYSTEM "
echo 
echo -e "${lor6}Name: ${lor7}$system"
echo ""
fi
if [ -f /proc/cpuinfo ];then
echo -e "${lor3} PROCESSOR "
echo 
uso=$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')
modelo=$(cat /proc/cpuinfo |grep "model name" |uniq |awk -F : {'print $2'})
cpucores=$(grep -c cpu[0-9] /proc/stat)
cache=$(cat /proc/cpuinfo |grep "cache size" |uniq |awk -F : {'print $2'})
clock=$(lscpu | grep "CPU MHz" | awk '{print $3}')
echo -e "${lor6}Model:${lor7}$modelo"
echo -e "${lor6}Nuclei:${lor7} $cpucores"
echo -e "${lor6}Memory cache:${lor7}$cache"
echo -e "${lor6}Architecture: ${lor7}$(uname -p)"
echo -e "${lor6}Used: ${lor7}$uso"
echo -e "${lor6}Clock: ${lor7}$clock MHz"
echo ""
else
echo -e "${lor3} PROCESSADOR "
echo 
echo ""
echo -e "${lor1}Information could not be obtained"
fi
if free 1>/dev/null 2>/dev/null;then
ram1=$(free -h | grep -i mem | awk {'print $2'})
ram2=$(free -h | grep -i mem | awk {'print $4'})
ram3=$(free -h | grep -i mem | awk {'print $3'})
usoram=$(free -m | awk 'NR==2{printf "%.2f%%\t\t", $3*100/$2 }')
echo -e "${lor3} MEMORY RAM "
echo
echo -e "${lor6}Total: ${lor7}$ram1"
echo -e "${lor6}In use: ${lor7}$ram3"
echo -e "${lor6}Free: ${lor7}$ram2"
echo -e "${lor6}Used: ${lor7}$usoram"
echo ""
else
echo -e "${lor3} MEMORY RAM "
echo 
echo -e "${lor1}Information could not be obtained"
echo
fi
espe
;;
4)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}            ADD / REMOVE / RENEW USERS "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} OPENSSH "
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} V2RAY   "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opc2
case $opc2 in

1)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                       OPENSSH "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} ADD USER "
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} REMOVE USER "
echo -e "${lor7}[${lor2}3${lor7}] ${lor3}==>${lor7} RENEW USER "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opci
echo
if [ "$opci" = "1" ];then
read -p " # Username :" name
awk -F : ' { print $1 }' /etc/passwd > /tmp/users 
if grep -Fxq "$name" /tmp/users;then
echo -e "${lor1} This user already exists ${lor7}"  	
else
if (echo $name | egrep [^a-zA-Z0-9.-_] &> /dev/null);then 
echo -e "${lor1} Invalid username ${lor7}" 
else
if [[ -z $name ]];then
echo -e "${lor1} Empty username ${lor7}" 
else
sizemin=$(echo ${#name})
if [[ $sizemin -lt 2 ]];then
echo -e "${lor1} Very short username ${lor7}" 
else
sizemax=$(echo ${#name})
if [[ $sizemax -gt 15 ]];then
echo -e "${lor1} Very large username ${lor7}" 
else	
read -p " # Password :" pass
if [[ -z $pass ]];then
echo -e "${lor1} Empty password ${lor7}" 
else
sizepass=$(echo ${#pass})
if [[ $sizepass -lt 5 ]];then
echo -e "${lor1} Very short password ${lor7}" 
else	
read -p " # Days to expire: " days
if (echo $days | egrep '[^0-9]' &> /dev/null);then
echo -e "${lor1} Invalid number of days" 
else
if [[ -z $days ]];then
echo -e "${lor1} Number of days empty ${lor7}" 
else	
if [[ $days -lt 1 ]];then
echo -e "${lor1} Number of days greater than zero ${lor7}"
else 
valid=$(date '+%C%y-%m-%d' -d " +$days days")
datespi=$(date "+%Y/%m/%d" -d " +$days days")
useradd -M -s /bin/false $name -e $valid
(echo $pass; echo $pass)|passwd $name 2>/dev/null
echo "$name | $pass | $datespi" >> /etc/prokill/database
IPSEC=$(wget -qO- whatismyip.akamai.com)
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor3} *${lor7} IP              : $IPSEC    "
echo -e "${lor3} *${lor7} User            : $name  " 
echo -e "${lor3} *${lor7} Password        : $pass  "
echo -e "${lor3} *${lor7} Expiration date : $datespi  " 
fi;fi;fi;fi;fi;fi;fi;fi;fi;fi
fi

if [ "$opci" = "2" ];then
clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                  SEE SSH CONNECTORS "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
sds=$(cat /etc/prokill/database |grep -c "|"|awk 'NR==1')
if [ "$sds" = "0" ]; then
echo -e "${lor1}                 NO REGISTERED USERS "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
else
echo -e "${lor7}                       User List "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
userss () {
for u in `cat /etc/prokill/database|awk -F "|" '{print $1}'`; do
echo "$u"
done
}			
assets=($(userss))
i=0
for us in $(echo ${assets[@]}); do
ed=$(cat /etc/prokill/database|grep -w "$us" |awk  '{print $5}')
echo -e "${lor7}[${lor2}$i${lor7}]${lor1} -> ${lor6}${us} -                ${lor7}REMOVE" 
let i++
done
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
     echo -ne "${lor7}REMOVE USER : " && read selection
     tput cuu1
     tput dl1
     if [[ -z ${selection} ]]; then
     echo;echo -e "${lor1}  EMPTY "
     else
     userdil="${assets[$selection]}"	 
userdel --force $userdil > /dev/null 2>/dev/null			
if [ -e /etc/prokill/database ]; then
grep -v ^$userdil[[:space:]] /etc/prokill/database > /tmp/ph ; cat /tmp/ph > /etc/prokill/database
fi
echo -e "${lor3}               USER $userdil WAS DELETED ${lor7}"

fi;fi
fi

if [ "$opci" = "3" ];then
clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                  SEE SSH CONNECTORS "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
sds=$(cat /etc/prokill/database |grep -c "|"|awk 'NR==1')
if [ "$sds" = "0" ]; then
echo -e "${lor1}                 NO REGISTERED USERS "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
else
echo -e "${lor7}                       User List "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
userss () {
for u in `cat /etc/prokill/database|awk -F "|" '{print $1}'`; do
echo "$u"
done
}			
assets=($(userss))
i=0
for us in $(echo ${assets[@]}); do
ed=$(cat /etc/prokill/database|grep -w "$us" |awk  'NR==1{print $5}')
echo -e "${lor7}[${lor2}$i${lor7}]${lor1} -> ${lor6}${us} -                ${lor7}${ed}" 
     let i++
     done
	 echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
     echo -ne "${lor7}RENEW USER : " && read selection
     tput cuu1
     tput dl1
     if [[ -z ${selection} ]]; then
     echo;echo -e "${lor1}  EMPTY "
     else
     userdil="${assets[$selection]}"
echo
read -p "Renew User $userdil for days : " inputdate
fetch=$(date "+%d/%m/%Y" -d " +$inputdate days")
fetch2=$(date "+%Y/%m/%d" -d " +$inputdate days")
sysdate="$(echo "$fetch" | awk -v FS=/ -v OFS=- '{print $3,$2,$1}')"
if (date "+%Y-%m-%d" -d "$sysdate" > /dev/null  2>&1);then
if [[ -z $fetch ]];then
echo ""
echo -e "${lor1}You have entered an invalid or non-existent date${lor7}" 
else
if (echo $fetch | egrep [^a-zA-Z] &> /dev/null);then
today="$(date -d today +"%Y%m%d")"
timemachine="$(date -d "$sysdate" +"%Y%m%d")"
if [ $today -ge $timemachine ]; then
echo -e "${lor1}You have entered a past date or the current day${lor1}" 
else
chage -E $sysdate $userdil
echo ;echo -e "${lor2}USER $userdil WAS RENEWED FOR THE DAYS $fetch2"
dataus=$(cat /etc/prokill/database |awk '{print $1,$2,$3,$4}')
grep -v ^$userdil[[:space:]] /etc/prokill/database > /tmp/ph ; cat /tmp/ph > /etc/prokill/database
echo "$dataus $fetch2" >> /etc/prokill/database
fi;fi;fi;fi;fi;fi
fi
espe
;;

2)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                        V2RAY "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} ADD USER V2RAY "
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} REMOVE USER V2RAY "
echo -e "${lor7}[${lor2}3${lor7}] ${lor3}==>${lor7} RENEW USER V2RAY "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opc3
echo
if [ "$opc3" = "1" ];then
if [ -f /etc/v2ray/config.json ];then

UUID=`uuidgen`	
err_fun () {
     case $1 in
     1)echo -e "${lor1}\n Null User ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     2)echo -e "${lor1}\n Very short name (MIN: 2 CHARACTERS)${lor7}";sleep 1s;tput cuu1;tput dl1;;
     3)echo -e "${lor1}\n Nombre muy grande (MAX: 5 CHARACTERS)${lor7}";sleep 1s;;
     4)echo -e "${lor1}\n Null Password ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     5)echo -e "${lor1}\n Very short password ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     6)echo -e "${lor1}\n Very large password ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     7)echo -e "${lor1}\n Null Duration ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     8)echo -e "${lor1}\n Invalid duration use numbers ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     9)echo -e "${lor1}\n Maximum duration and one year ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     11)echo -e "${lor1}\n Null limit ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     12)echo -e "${lor1}\n Invalid limit use numbers ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     13)echo -e "${lor1}\n Maximum limit of 999 ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     14)echo -e "${lor1}\n User already exists ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     16)echo -e "${lor1}\n (Only numbers)${lor7}";sleep 1s;tput cuu1;tput dl1;;
     17)echo -e "${lor1}\n Sin Informacion ${lor7}";sleep 1s;tput cuu1;tput dl1;;
     esac
}


valid=$(date '+%C%y-%m-%d' -d " +31 days")		  	  
UUID=`uuidgen`	
bs=$(sed -n '/'"clients"'/=' /etc/v2ray/config.json)
nu1=$(echo $bs + 1 | bc)
echo -ne "${col7} > Generated UUID: ${col6}$UUID "
while true; do
echo
echo -ne "${col7} > Username "
     read -p ": " nick
     nick="$(echo $nick|sed -e 's/[^a-z0-9 -]//ig')"
	 chuser=$(cat /etc/prokill/RegV2ray|grep -w "$nick" |awk  '{print $3}')
	 if [ "$nick" = "$chuser" ]; then
	 err_fun 14 && continue 
	 fi
	 
     if [[ -z $nick ]]; then
     err_fun 17 && continue 
     elif [[ "${#nick}" -lt "2" ]]; then
     err_fun 2 && continue
     elif [[ "${#nick}" -gt "9" ]]; then
     err_fun 3 && continue
     fi
     break
done
while true; do
     echo -ne "${col7} > Duration of (Days): " && read diasuser
     if [[ -z "$diasuser" ]]; then
     err_fun 17 && continue
     elif [[ "$diasuser" != +([0-9]) ]]; then
     err_fun 8 && continue
     elif [[ "$diasuser" -gt "360" ]]; then
     err_fun 9 && continue
     fi 
     break
done
read -p " > Hostbug: " bugd 
[[ "$bugd" = "" ]]&& bugd="hostbug.com"
portf=$(cat /etc/v2ray/config.json |grep -w "port"|awk -F : '{print $2}'|sed 's;,;;g'|tr -d '[[:space:]]')
domain=$(cat /etc/v2ray/config.json |grep -w "host"|awk -F : '{print $2}'|sed 's;";;g')
path=$(cat /etc/v2ray/config.json |grep -w "path"|awk -F : '{print $2}'|sed 's;";;g')
alertv2=$(cat /etc/v2ray/config.json |grep -w "alterId"|awk -F : 'NR==1{print $3}'|sed 's;, "level";;g')
sed -i "$nu1 i\           \ { "'"'"id"'"'": "'"'"$UUID"'"'", "'"'"alterId"'"'":$alertv2, "'"'"level"'"'":1 }, " /etc/v2ray/config.json
valid=$(date '+%C%y-%m-%d' -d " +$diasuser days") && datexp=$(date "+%F" -d " + $diasuser days")
echo "$UUID | $nick | $valid" >> /etc/prokill/RegV2ray
screen -r -S "v2ser" -X quit >/dev/null 2>&1
screen -wipe > /dev/null 2>&1
screen -dmS v2ser v2raypro -config /etc/v2ray/config.json >/dev/null 2>&1
vmes=$(echo '{"add":"'$bugd'","aid":"'$alertv2'","id":"'$UUID'","host":"'$domain'","net":"ws","path":"'$path'","port":"'$portf'","ps":"'$domain'","tls":"","type":"none","v":"2"}'|base64|xargs|tr -d '[[:space:]]')
echo;echo -ne "${lor7} LINK :${lor6} vmess://${vmes}${lor7}"
echo
else
echo -e "${lor1} V2RAY NOT INSTALLED ${lor7}"
fi
fi

if [ "$opc3" = "2" ];then
clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                  V2RAY USER LIST  "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
touch /etc/prokill/RegV2ray
cat /etc/prokill/RegV2ray |tr '\n' ' ' >/tmp/vx && cat /tmp/vx > /etc/prokill/RegV2ray
sds=$(cat /etc/prokill/RegV2ray |grep -c "|"|awk 'NR==1')
if [ "$sds" = "0" ]; then
echo -e "${lor1}                 NO REGISTERED USERS "
else
echo -e "${lor7}                    User List V2RAY "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
us_v2ray () {
for u in `cat /etc/prokill/RegV2ray|awk -F "|" '{print $2}'`; do
echo "$u"
done
}
usersv2=($(us_v2ray))
i=0
for us in $(echo ${usersv2[@]}); do
uui=$(cat /etc/prokill/RegV2ray|grep -w "$us" |awk  '{print $1}')
echo -e "${lor7}[${lor2}$i${lor7}]${lor1} -> ${lor6}${us} - ${lor7}${uui}${col7}" 
let i++
done
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -ne "${col7}REMOVE USER : " && read selection
tput cuu1
tput dl1
if [[ -z ${selection} ]]; then
echo;echo -e "${lor1}  EMPTY "
else
userv2="${usersv2[$selection]}"	
uuidel=$(cat /etc/prokill/RegV2ray|grep -w "$userv2" |awk  '{print $1}')
[[ $(sed -n '/'${uuidel}'/=' /etc/v2ray/config.json|head -1) ]] || echo -e "${lor1}  INVALID UUID "
del1=$(sed -n '/'${uuidel}'/=' /etc/v2ray/config.json)
del2=$(sed -n '/'${uuidel}'/=' /etc/prokill/RegV2ray)
sed -i "${del1}d" /etc/v2ray/config.json
sed -i "${del2}d" /etc/prokill/RegV2ray
screen -r -S "v2ser" -X quit >/dev/null 2>&1
screen -wipe > /dev/null 2>&1
screen -dmS v2ser v2raypro -config /etc/v2ray/config.json >/dev/null 2>&1
echo -e "${lor3}              USER $userv2 WAS DELETED ${lor7}"
fi;fi
fi

if [ "$opc3" = "3" ];then
clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                  V2RAY USER LIST  "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
touch /etc/prokill/RegV2ray
cat /etc/prokill/RegV2ray |tr '\n' ' ' >/tmp/vx && cat /tmp/vx > /etc/prokill/RegV2ray
sds=$(cat /etc/prokill/RegV2ray |grep -c "|"|awk 'NR==1')
if [ "$sds" = "0" ]; then
echo -e "${lor1}                 NO REGISTERED USERS "
else
echo -e "${lor7}                    User List V2RAY "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
us_v2ray () {
for u in `cat /etc/prokill/RegV2ray|awk -F "|" '{print $2}'`; do
echo "$u"
done
}
usersv2=($(us_v2ray))
i=0
for us in $(echo ${usersv2[@]}); do
fecha=$(cat /etc/prokill/RegV2ray|grep -w "$us" |awk  '{print $5}')
echo -e "${lor7}[${lor2}$i${lor7}]${lor1} -> ${lor6}${us} - ${lor2} $fecha ${col7}" 
let i++
done
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -ne "${col7}RENEW USER : " && read selection
tput cuu1
tput dl1
if [[ -z ${selection} ]]; then
echo;echo -e "${lor1}  EMPTY "
else
userv2="${usersv2[$selection]}"
read -p "Renew User $userv2 for days : " inputdate
fetch=$(date "+%Y-%m-%d" -d " +$inputdate days")
if [[ -z $fetch ]]; then
echo;echo -e "${lor1} You have entered an invalid or non-existent date"
else
if grep -w "$userv2" /etc/prokill/RegV2ray > /dev/null; then
dataus=$(cat /etc/prokill/RegV2ray |awk '{print $1,$2,$3,$4}'|grep -w "$userv2")
num=$(sed -n '/'${userv2}'/=' /etc/prokill/RegV2ray)
sed -i "${num}d" /etc/prokill/RegV2ray
echo "$dataus $fetch" >> /etc/prokill/RegV2ray
fi
echo ;echo -e "${lor2}USER $userv2 WAS RENEWED FOR THE DAYS $fetch"
fi;fi;fi
fi


espe
;;

esac
;;



5)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                  INSTALL PROTOCOLS "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} BADVPN MANAGER      "
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} DROPBEAR MANAGER    "
echo -e "${lor7}[${lor2}3${lor7}] ${lor3}==>${lor7} START PROXY PYTHON  "
echo -e "${lor7}[${lor2}4${lor7}] ${lor3}==>${lor7} SSL STUNNEL MANAGER "
echo -e "${lor7}[${lor2}5${lor7}] ${lor3}==>${lor7} SLOWDNS MANAGER "
echo -e "${lor7}[${lor2}6${lor7}] ${lor3}==>${lor7} V2RAY WEBSOCKET "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opc2
case $opc2 in
1)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                   BADVPN MANAGER "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
[[ $(netstat -nplt |grep 'badvpn-udpgw') ]] && badvp="STOP SERVICE ${lor2}ON" || badvp="START SERVICE ${lor1}OFF"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} INSTALL BADVPN"
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} UNINSTALL BADVPN "
echo -e "${lor7}[${lor2}3${lor7}] ${lor3}==>${lor7} $badvp "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opci
if [ "$opci" = "1" ];then
if [ -f /bin/badvpn-udpgw ];then
echo;echo -e "${lor1} BADVPN IS ALREADY INSTALLED "
else
echo;echo -e "${lor3}              CONFIGURING BADVPN..  "
badvpn (){
wget https://www.dropbox.com/s/t6wu15el66xd4bn/badvpn-udpgw
mv badvpn-udpgw /bin/badvpn-udpgw
chmod 777 /bin/badvpn-udpgw
sed -i '$d' /etc/rc.local
echo "/bin/badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 1000 --max-connections-for-client 10 &" >> /etc/rc.local 
echo "exit 0" >> /etc/rc.local 
screen -dmS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 1000 --max-connections-for-client 10 
}
fun_bar 'badvpn'
echo;echo -e "${lor2} DROPBEAR INSTALLED IN THE PORT  "
fi
fi
if [ "$opci" = "2" ];then
if [ -f /bin/badvpn-udpgw ];then
for pid in $(pgrep badvpn-udpgw);do
kill $pid
done
rm -rf /bin/badvpn-udpgw
echo;echo -e "${lor2} BADVPN WAS REMOVED "
else
echo;echo -e "${lor1} BADVPN IS NOT INSTALLED "
fi;fi
if [ "$opci" = "3" ];then
if [ -f /bin/badvpn-udpgw ];then
if netstat -nltp|grep 'badvpn-udpgw' > /dev/null; then
for pid in $(pgrep badvpn-udpgw);do
kill $pid
done
echo;echo -e "${lor1} SERVICE STOPPED "
else
screen -dmS badvpn badvpn-udpgw --listen-addr 127.0.0.1:7300 --max-clients 1000 --max-connections-for-client 10
echo;echo -e "${lor2} SERVICE STARTED "
fi
else
echo;echo -e "${lor1} BADVPN IS NOT INSTALLED "
fi
fi
espe
;;
2)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                  DROPBEAR MANAGER "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
[[ $(netstat -nplt |grep 'dropbear') ]] && dropp="STOP SERVICE ${lor2}ON" || dropp="START SERVICE ${lor1}OFF"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} INSTALL DROPBEAR   "
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} UNINSTALL DROPBEAR "
echo -e "${lor7}[${lor2}3${lor7}] ${lor3}==>${lor7} ADD NEW PORT "
echo -e "${lor7}[${lor2}4${lor7}] ${lor3}==>${lor7} $dropp "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opci
if [ "$opci" = "1" ];then
if [ -f /etc/default/dropbear ];then
echo;echo -e "${lor1} DROPBEAR IS ALREADY INSTALLED "
else
echo;echo -e "${lor7} Listen-Port  ${lor6}"
read -p " :" ptdo
if [ -z $ptdo ]; then
echo;echo -e "${lor1}  INVALID PORT"  
else 
if (echo $ptdo | egrep '[^0-9]' &> /dev/null);then
echo;echo -e "${lor1}  YOU MUST ENTER A NUMBER" 
else
if lsof -Pi :$ptdo -sTCP:LISTEN -t >/dev/null ; then
echo;echo -e "${lor1}  THE PORT IS ALREADY IN USE"  
else
insdro () {
apt-get install dropbear -y
 cat <<EOF > /etc/default/dropbear
NO_START=0
DROPBEAR_EXTRA_ARGS="-p $ptdo "
DROPBEAR_RECEIVE_WINDOW=65536
EOF
if cat /etc/shells|grep "/bin/false" > /dev/null; then
clear
else
echo -e "/bin/false" >> /etc/shells
fi
service ssh restart > /dev/null
service dropbear restart > /dev/null
}
echo;echo -e "${lor3}              CONFIGURING DROPBEAR..  "
fun_bar 'insdro'
echo;echo -e "${lor2} DROPBEAR INSTALLED IN THE PORT :$ptdo "
fi;fi;fi;fi
fi

if [ "$opci" = "2" ];then
if [ -f /etc/default/dropbear ];then
echo;echo -e "${lor3}              REMOVING DROPBEAR..  "
rem_drop () { 
service dropbear stop
apt-get remove dropbear -y
apt-get purge dropbear -y
rm -rf /etc/default/dropbear
    }
fun_bar 'rem_drop'
echo;echo -e "${lor2} REMOVING DROPBEAR "
else
echo;echo -e "${lor1} DROPBEAR IS NOT INSTALLED "
fi
fi
if [ "$opci" = "3" ];then
if [ -f /etc/default/dropbear ];then
echo;echo -e "${lor7} Add new port  ${lor6}"
read -p " :" ptdo
if [ -z $ptdo ]; then
echo;echo -e "${lor1}  INVALID PORT"  
else 
if (echo $ptdo | egrep '[^0-9]' &> /dev/null);then
echo;echo -e "${lor1}  YOU MUST ENTER A NUMBER" 
else
if lsof -Pi :$ptdo -sTCP:LISTEN -t >/dev/null ; then
echo;echo -e "${lor1}  THE PORT IS ALREADY IN USE"  
else
adddropt () {
  unset dropt 
  dropt_var=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" |grep -v "COMMAND" | grep "LISTEN" | grep dropbear)
  while read port; do
  var2=$(echo $port | awk '{print $9}' | awk -F ":" '{print $2}')
  [[ "$(echo -e $dropt|grep "$var2")" ]] || dropt+="per: -p ${var2}\n"
  done <<< "$dropt_var"
  i=1
  echo -e "$dropt" > list-pt      
  newpt=$(cat list-pt | grep per | awk -F ":" '{print $2}' | xargs)
  portls=$(sed -n '2 p' /etc/default/dropbear)
  sed -i "s/$portls/DROPBEAR_EXTRA_ARGS=' $newpt -p $ptdo '/g" /etc/default/dropbear
  service ssh restart
  service dropbear restart
  }
fun_bar 'adddropt' 
echo;echo -e "${lor2} NEW PORT ADDED $ptdo "
rm -rf list-pt
fi;fi;fi
else
echo;echo -e "${lor1} DROPBEAR IS NOT INSTALLED "
fi
fi
if [ "$opci" = "4" ];then
if [ -f /etc/default/dropbear ];then
if netstat -nltp|grep 'dropbear' > /dev/null; then
service dropbear stop
echo;echo -e "${lor1} SERVICE STOPPED "
else
service dropbear restart
echo;echo -e "${lor2} SERVICE STARTED "
fi
else
echo;echo -e "${lor1} DROPBEAR IS NOT INSTALLED "
fi
fi
espe
;;

3)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                    PROXY PYTHON "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} START PROXY"
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} STOP PYTHON SERVICE "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opci
if [ "$opci" = "1" ];then
for pid in $(pgrep apache2);do
kill $pid
done
pt=$(netstat -nplt |grep 'sshd' | awk -F ":" NR==1{'print $2'} | cut -d " " -f 1)
echo;echo -e "${lor7} Local port  ${lor6}"
read -p " :" -e -i $pt PT
echo;echo -e "${lor7} Listen-proxy  ${lor6}"
read -p " :" ptg
if [ -z $ptg ]; then
echo;echo -e "${lor1}  INVALID PORT"  
else 
if (echo $ptg | egrep '[^0-9]' &> /dev/null);then
echo;echo -e "${lor1}  YOU MUST ENTER A NUMBER" 
else
if lsof -Pi :$ptg -sTCP:LISTEN -t >/dev/null ; then
echo;echo -e "${lor1}  THE PORT IS ALREADY IN USE"  
else
echo;echo -e "${lor7} banner Message ${lor6}"
read -p " :" -e -i "<font color="red">ProtoKill Script</font>" msgbanner
echo;echo -e "${lor7} Status  ${lor6}"
read -p " :" -e -i 101 stus 
cat <<EOF > /tmp/proxy.py
import socket, threading, thread, select, signal, sys, time, getopt

# CONFIG
LISTENING_ADDR = '0.0.0.0'
LISTENING_PORT = 1080
PASS = ''

# CONST
BUFLEN = 4096 * 4
TIMEOUT = 60
DEFAULT_HOST = "127.0.0.1:$PT"
RESPONSE = 'HTTP/1.1 $stus $msgbanner \r\nContent-length: 0\r\n\r\nHTTP/1.1 200 conexion exitosa\r\n\r\n'
 
class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.threads = []
	self.threadsLock = threading.Lock()
	self.logLock = threading.Lock()

    def run(self):
        self.soc = socket.socket(socket.AF_INET)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        self.soc.bind((self.host, self.port))
        self.soc.listen(0)
        self.running = True

        try:                    
            while self.running:
                try:
                    c, addr = self.soc.accept()
                    c.setblocking(1)
                except socket.timeout:
                    continue
                
                conn = ConnectionHandler(c, self, addr)
                conn.start();
                self.addConn(conn)
        finally:
            self.running = False
            self.soc.close()
            
    def printLog(self, log):
        self.logLock.acquire()
        print log
        self.logLock.release()
	
    def addConn(self, conn):
        try:
            self.threadsLock.acquire()
            if self.running:
                self.threads.append(conn)
        finally:
            self.threadsLock.release()
                    
    def removeConn(self, conn):
        try:
            self.threadsLock.acquire()
            self.threads.remove(conn)
        finally:
            self.threadsLock.release()
                
    def close(self):
        try:
            self.running = False
            self.threadsLock.acquire()
            
            threads = list(self.threads)
            for c in threads:
                c.close()
        finally:
            self.threadsLock.release()
			

class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        threading.Thread.__init__(self)
        self.clientClosed = False
        self.targetClosed = True
        self.client = socClient
        self.client_buffer = ''
        self.server = server
        self.log = 'Connection: ' + str(addr)

    def close(self):
        try:
            if not self.clientClosed:
                self.client.shutdown(socket.SHUT_RDWR)
                self.client.close()
        except:
            pass
        finally:
            self.clientClosed = True
            
        try:
            if not self.targetClosed:
                self.target.shutdown(socket.SHUT_RDWR)
                self.target.close()
        except:
            pass
        finally:
            self.targetClosed = True

    def run(self):
        try:
            self.client_buffer = self.client.recv(BUFLEN)
        
            hostPort = self.findHeader(self.client_buffer, 'X-Real-Host')
            
            if hostPort == '':
                hostPort = DEFAULT_HOST

            split = self.findHeader(self.client_buffer, 'X-Split')

            if split != '':
                self.client.recv(BUFLEN)
            
            if hostPort != '':
                passwd = self.findHeader(self.client_buffer, 'X-Pass')
				
                if len(PASS) != 0 and passwd == PASS:
                    self.method_CONNECT(hostPort)
                elif len(PASS) != 0 and passwd != PASS:
                    self.client.send('HTTP/1.1 400 WrongPass!\r\n\r\n')
                elif hostPort.startswith('127.0.0.1') or hostPort.startswith('localhost'):
                    self.method_CONNECT(hostPort)
                else:
                    self.client.send('HTTP/1.1 403 Forbidden!\r\n\r\n')
            else:
                print '- No X-Real-Host!'
                self.client.send('HTTP/1.1 400 NoXRealHost!\r\n\r\n')

        except Exception as e:
            self.log += ' - error: ' + e.strerror
            self.server.printLog(self.log)
	    pass
        finally:
            self.close()
            self.server.removeConn(self)

    def findHeader(self, head, header):
        aux = head.find(header + ': ')
    
        if aux == -1:
            return ''

        aux = head.find(':', aux)
        head = head[aux+2:]
        aux = head.find('\r\n')

        if aux == -1:
            return ''

        return head[:aux];

    def connect_target(self, host):
        i = host.find(':')
        if i != -1:
            port = int(host[i+1:])
            host = host[:i]
        else:
            if self.method=='CONNECT':
                port = 443
            else:
                port = 80

        (soc_family, soc_type, proto, _, address) = socket.getaddrinfo(host, port)[0]

        self.target = socket.socket(soc_family, soc_type, proto)
        self.targetClosed = False
        self.target.connect(address)

    def method_CONNECT(self, path):
        self.log += ' - CONNECT ' + path
        
        self.connect_target(path)
        self.client.sendall(RESPONSE)
        self.client_buffer = ''

        self.server.printLog(self.log)
        self.doCONNECT()

    def doCONNECT(self):
        socs = [self.client, self.target]
        count = 0
        error = False
        while True:
            count += 1
            (recv, _, err) = select.select(socs, [], socs, 3)
            if err:
                error = True
            if recv:
                for in_ in recv:
		    try:
                        data = in_.recv(BUFLEN)
                        if data:
			    if in_ is self.target:
				self.client.send(data)
                            else:
                                while data:
                                    byte = self.target.send(data)
                                    data = data[byte:]

                            count = 0
			else:
			    break
		    except:
                        error = True
                        break
            if count == TIMEOUT:
                error = True

            if error:
                break


def print_usage():
    print 'Usage: proxy.py -p <port>'
    print '       proxy.py -b <bindAddr> -p <port>'
    print '       proxy.py -b 0.0.0.0 -p 1080'

def parse_args(argv):
    global LISTENING_ADDR
    global LISTENING_PORT
    
    try:
        opts, args = getopt.getopt(argv,"hb:p:",["bind=","port="])
    except getopt.GetoptError:
        print_usage()
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print_usage()
            sys.exit()
        elif opt in ("-b", "--bind"):
            LISTENING_ADDR = arg
        elif opt in ("-p", "--port"):
            LISTENING_PORT = int(arg)
    

def main(host=LISTENING_ADDR, port=LISTENING_PORT):
    
    print "\n ==============================\n"
    print "\n         PYTHON PROXY          \n"
    print "\n ==============================\n"
    print "corriendo ip: " + LISTENING_ADDR
    print "corriendo port: " + str(LISTENING_PORT) + "\n"
    print "Se ha Iniciado Por Favor Cierre el Terminal\n"
    
    server = Server(LISTENING_ADDR, LISTENING_PORT)
    server.start()

    while True:
        try:
            time.sleep(2)
        except KeyboardInterrupt:
            print 'Stopping...'
            server.close()
            break
    
if __name__ == '__main__':
    parse_args(sys.argv[1:])
    main()
EOF
screen -dmS pythonwe python /tmp/proxy.py -p $ptg &> /dev/null

echo;echo -e "${lor2} PORT $ptg INITIATED"
fi;fi;fi

fi
if [ "$opci" = "2" ];then
for pid in $(pgrep python);do
kill $pid
done
echo;echo -e "${lor1} PROXY PYTHON WAS DETAINED"
fi
espe
;;
4)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                 SSL STUNNEL MANAGER "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
[[ $(netstat -nplt |grep 'stunnel4') ]] && sessl="STOP SERVICE ${lor2}ON" || sessl="START SERVICE ${lor1}OFF"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} INSTALL SSL STUNNEL"
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} UNINSTALL SSL STUNNEL "
echo -e "${lor7}[${lor2}3${lor7}] ${lor3}==>${lor7} ADD NEW PORT "
echo -e "${lor7}[${lor2}4${lor7}] ${lor3}==>${lor7} $sessl "
echo -e "${lor7}[${lor2}5${lor7}] ${lor3}==>${lor7} CERTIFICATE "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opci
if [ "$opci" = "1" ];then
if [ -f /etc/stunnel/stunnel.conf ]; then
echo;echo -e "${lor1}  ALREADY INSTALLED" 
else
echo;echo -e "${lor7} Local port  ${lor6}"
pt=$(netstat -nplt |grep 'sshd' | awk -F ":" NR==1{'print $2'} | cut -d " " -f 1)
read -p " :" -e -i $pt PT
echo;echo -e "${lor7} Listen-SSL  ${lor6}"
read -p " :" sslpt
if [ -z $sslpt ]; then
echo;echo -e "${lor1}  INVALID PORT"  
else 
if (echo $sslpt | egrep '[^0-9]' &> /dev/null);then
echo;echo -e "${lor1}  YOU MUST ENTER A NUMBER" 
else
if lsof -Pi :$sslpt -sTCP:LISTEN -t >/dev/null ; then
echo;echo -e "${lor1}  THE PORT IS ALREADY IN USE"  
else
inst_ssl () {
apt-get purge stunnel4 -y 
apt-get purge stunnel -y
apt-get install stunnel -y
apt-get install stunnel4 -y
pt=$(netstat -nplt |grep 'sshd' | awk -F ":" NR==1{'print $2'} | cut -d " " -f 1)
echo -e "cert = /etc/stunnel/stunnel.pem\nclient = no\nsocket = a:SO_REUSEADDR=1\nsocket = l:TCP_NODELAY=1\nsocket = r:TCP_NODELAY=1\n\n[stunnel]\nconnect = 127.0.0.1:${PT}\naccept = ${sslpt}" > /etc/stunnel/stunnel.conf
openssl genrsa -out key.pem 2048 > /dev/null 2>&1
(echo br; echo br; echo uss; echo speed; echo pnl; echo killshito; echo @killshito.com)|openssl req -new -x509 -key key.pem -out cert.pem -days 1095 > /dev/null 2>&1
cat key.pem cert.pem >> /etc/stunnel/stunnel.pem
rm -rf key.pem;rm -rf cert.pem
sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
service stunnel4 restart
service stunnel restart
service stunnel4 start
}
fun_bar 'inst_ssl'
echo;echo -e "${lor2}  SSL STUNNEL INSTALLED " 
fi;fi;fi;fi
fi
if [ "$opci" = "2" ];then
del_ssl () {
service stunnel4 stop
apt-get remove stunnel4 -y
apt-get purge stunnel4 -y
apt-get purge stunnel -y
rm -rf /etc/stunnel
rm -rf /etc/stunnel/stunnel.conf
rm -rf /etc/default/stunnel4
rm -rf /etc/stunnel/stunnel.pem
}
fun_bar 'del_ssl'
echo;echo -e "${lor2}  SSL STUNNEL WAS REMOVED " 
fi
if [ "$opci" = "3" ];then
if [ -f /etc/stunnel/stunnel.conf ]; then 
echo;echo -e "${lor7}Enter a name for the SSL Redirector${lor6}"
read -p " :" -e -i stunnel namessl
echo;echo -e "${lor7}Enter the port of the Service to bind${lor6}"
pt=$(netstat -nplt |grep 'sshd' | awk -F ":" NR==1{'print $2'} | cut -d " " -f 1)
read -p " :" -e -i $pt PT
echo;echo -e "${lor7}Enter the New SSL Port${lor6}"
read -p " :" sslpt
if [ -z $sslpt ]; then
echo;echo -e "${lor1}  INVALID PORT"  
else 
if (echo $sslpt | egrep '[^0-9]' &> /dev/null);then
echo;echo -e "${lor1}  YOU MUST ENTER A NUMBER" 
else
if lsof -Pi :$sslpt -sTCP:LISTEN -t >/dev/null ; then
echo;echo -e "${lor1}  THE PORT IS ALREADY IN USE"  
else
addgf () {		
echo -e "\n[$namessl] " >> /etc/stunnel/stunnel.conf
echo "connect = 127.0.0.1:$PT" >> /etc/stunnel/stunnel.conf 
echo "accept = $sslpt " >> /etc/stunnel/stunnel.conf 
service stunnel4 restart 1> /dev/null 2> /dev/null
service stunnel restart 1> /dev/null 2> /dev/null
sleep 2
}
fun_bar 'addgf'
echo;echo -e "${lor2} NEW PORT ADDED  $sslpt !${lor7}"
fi;fi;fi
else
echo;echo -e "${lor1} SSL STUNEEL NOT INSTALLED !${lor7}"
fi
fi
if [ "$opci" = "4" ];then
if [ -f /etc/stunnel/stunnel.conf ];then
if netstat -nltp|grep 'stunnel4' > /dev/null; then
service stunnel stop 1> /dev/null 2> /dev/null
service stunnel4 stop 1> /dev/null 2> /dev/null
echo;echo -e "${lor1} SERVICE STOPPED "
else
service stunnel start 1> /dev/null 2> /dev/null
service stunnel4 start 1> /dev/null 2> /dev/null
echo;echo -e "${lor2} SERVICE STARTED "
fi
else
echo;echo -e "${lor1} SSL STUNNEL IS NOT INSTALLED "
fi
fi

if [ "$opci" = "5" ];then
if [ -f /etc/stunnel/stunnel.conf ]; then
insapa2(){
for pid in $(pgrep python);do
kill $pid
done
for pid in $(pgrep apache2);do
kill $pid
done
service dropbear stop
apt install apache2 -y
echo "Listen 80

<IfModule ssl_module>
        Listen 443
</IfModule>

<IfModule mod_gnutls.c>
        Listen 443
</IfModule> " > /etc/apache2/ports.conf
service apache2 restart
}
fun_bar 'insapa2'
echo;echo -e "${lor7} Verify Domain ${lor6}"
read -p " KEY:" keyy
echo
read -p " DATA:" dat2w
mkdir -p /var/www/html/.well-known/pki-validation/
datfr1=$(echo "$dat2w"|awk '{print $1}')
datfr2=$(echo "$dat2w"|awk '{print $2}')
datfr3=$(echo "$dat2w"|awk '{print $3}')
echo -ne "${datfr1}\n${datfr2}\n${datfr3}" >/var/www/html/.well-known/pki-validation/$keyy.txt
echo;echo -e "${lor3} CHECK ON THE ZEROSSL PAGE ${lor7}"
read -p " ENTER TO CONTINUE"
echo;echo -e "${lor7} CERTIFICATE LINK ${lor6}"
echo -e "${lor6} LINK ${lor1}> ${lor7}\c"
read linksd
inscerts(){
wget $linksd -O /etc/stunnel/certificado.zip
cd /etc/stunnel/
unzip certificado.zip 
cat private.key certificate.crt ca_bundle.crt > stunnel.pem
service stunnel restart
service stunnel4 restart
}
fun_bar 'inscerts'
echo;echo -e "${lor2} CERTIFICATE INSTALLED ${lor7}" 
else
echo;echo -e "${lor1} SSL STUNNEL IS NOT INSTALLED "
fi
fi
espe
;;
5)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                   SLOWDNS MANAGER "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
[[ $(ps x | grep -w dns-server | grep -v grep) ]] && serslow="STOP SERVICE ${lor2}ON" || serslow="START SERVICE ${lor1}OFF"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} INSTALL SLOWDN"
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} UNINSTALL SLOWDN "
echo -e "${lor7}[${lor2}3${lor7}] ${lor3}==>${lor7} DATA RECORDS "
echo -e "${lor7}[${lor2}4${lor7}] ${lor3}==>${lor7} $serslow "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opci
if [ "$opci" = "1" ];then
if [ -d /etc/prokill/dns ]; then
echo;echo -e "${lor1} SLOWDNS IS ALREADY INSTALLED ${lor7}"
else
echo;echo -ne "\n${col7} Enter Domain NS : "
read ns
if [[ -z "$ns" ]]; then
echo;echo -e "${lor1} INCORRECT DOMAIN ${lor7}"
else
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} SLOWDNS SSH${col7}"
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} SLOWDNS DROPBEAR${col7}"
echo -e "${lor7}[${lor2}3${lor7}] ${lor3}==>${lor7} SLOWDNS SSL${col7}"
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION : " opcc
if [ -z $opcc ]; then
echo
else	
if [[ "$opcc" == '1' ]]; then
ptdns='22'
fi
if [[ "$opcc" == '2' ]]; then
sls=$(netstat -nplt |grep 'dropbear' | awk -F ":" 'NR==1{print $2}' | cut -d " " -f 1)
if [[ $sls == '' ]]; then
echo;cho -e "${lor1} DROPBE NOT INSTALLED OR STARTED "
else
ptdns="$sls"
fi
fi
if [[ "$opcc" == '3' ]]; then
sls=$(netstat -nplt | grep 'stunnel' | awk {'print $4'} | cut -d: -f2)
if [[ $sls == '' ]]; then
echo;echo -e "${lor1} SSL NOT INSTALLED OR STARTED "
else
ptdns="$sls"
fi
fi
configdns() {
apt install iptables
[[ ! -e /etc/iptables/rules.v4 ]]&& iptables-save > /etc/iptables/rules.v4
    mkdir /etc/prokill/dns >/dev/null 2>&1
    wget -P /etc/prokill/dns https://www.dropbox.com/s/yslne1f5x3cg6zt/dns-server >/dev/null 2>&1
    chmod 777 /etc/prokill/dns/dns-server >/dev/null 2>&1
    /etc/prokill/dns/dns-server -gen-key -privkey-file /etc/prokill/dns/server.key -pubkey-file /etc/prokill/dns/server.pub >/dev/null 2>&1
    interface=$(ip a | awk '/state UP/{print $2}' | cut -d: -f1|head -1)
    iptables -F >/dev/null 2>&1
    iptables -I INPUT -p udp --dport 5300 -j ACCEPT
    iptables -t nat -I PREROUTING -i $interface -p udp --dport 53 -j REDIRECT --to-ports 5300
    ip6tables -I INPUT -p udp --dport 5300 -j ACCEPT
    ip6tables -t nat -I PREROUTING -i $interface -p udp --dport 53 -j REDIRECT --to-ports 5300
DEBIAN_FRONTEND=noninteractive apt install -y iptables-persistent
cat /dev/null >~/.bash_history && history -c
}
echo;echo -e "${lor3}               INSTALLING SLOWDNS ${lor7}"
fun_bar 'configdns'
screen -dmS slow_dns /etc/prokill/dns/dns-server -udp :5300 -privkey-file /etc/prokill/dns/server.key ${ns} 0.0.0.0:${ptdns} >/dev/null 2>&1
echo "${ptdns}" > /etc/prokill/dns/portdns
keypub=$(cat /etc/prokill/dns/server.pub)
cd $HOME
echo		
echo "${ns}" > /etc/prokill/dns/ns
echo -e "${lor6} DOMAIN NS${lor7}  :${ns} ${lor7}"
echo -e "${lor6} PUBLIC KEY${lor7} :${keypub} ${lor7}"   
echo
fi;fi;fi;fi
if [ "$opci" = "2" ];then
if [ -d /etc/prokill/dns/ ];then
rm -rf /etc/prokill/dns/
screen -r -S "slow_dns" -X quit >/dev/null 2>&1
screen -wipe > /dev/null 2>&1
iptables -F && iptables -X && iptables -t nat -F && iptables -t nat -X && iptables -t mangle -F && iptables -t mangle -X && iptables -t raw -F && iptables -t raw -X && iptables -t security -F && iptables -t security -X && iptables -P INPUT ACCEPT && iptables -P FORWARD ACCEPT && iptables -P OUTPUT ACCEPT
echo;echo -e "${lor1} SLOWDNS WAS REMOVED ${lor7}"
else
echo;echo -e "${lor1} SLOWDNS NOT INSTALLED ${lor7}"
fi
fi
if [ "$opci" = "3" ];then
if [ -f /etc/prokill/dns/ns ];then
keypub=$(cat /etc/prokill/dns/server.pub)
ns=$(cat /etc/prokill/dns/ns)
echo
echo -e "${lor6} DOMAIN NS${lor7}  :${ns} ${lor7}"
echo -e "${lor6} PUBLIC KEY${lor7} :${keypub} ${lor7}"  
else
echo;echo -e "${lor1} RECORD NOT FOUND ${lor7}"
fi
fi
if [ "$opci" = "4" ];then
if [ -d /etc/prokill/dns ];then
if ps x | grep -w dns-server | grep -v grep 1>/dev/null 2>/dev/null; then 
screen -r -S "slow_dns" -X quit >/dev/null 2>&1
screen -wipe > /dev/null 2>&1
echo;echo -e "${lor1} SLOWDNS STOPPED ${col7}"
else
ns=$(cat /etc/prokill/dns/ns)
keypub=$(cat /etc/prokill/dns/server.pub)
ptdns=$(cat /etc/prokill/dns/portdns)
screen -dmS slow_dns /etc/prokill/dns/dns-server -udp :5300 -privkey-file /etc/prokill/dns/server.key ${ns} 0.0.0.0:${ptdns} >/dev/null 2>&1
echo;echo -e "${lor2} SLOWDNS STARTED ${col7}"
fi
else
echo;echo -e "${lor1} SLOWDNS NOT INSTALLED ${lor7}"
fi;fi
espe
;;
6)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                    V2RAY WEBSOCKET "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
[[ $(netstat -nplt |grep 'v2raypro') ]] && serv2="STOP SERVICE ${lor2}ON" || serv2="START SERVICE ${lor1}OFF"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} INSTALL V2RAY "
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} UNINSTALL V2RAY "
echo -e "${lor7}[${lor2}3${lor7}] ${lor3}==>${lor7} DOMAIN VRAY "
echo -e "${lor7}[${lor2}4${lor7}] ${lor3}==>${lor7} CHANGE PORT "
echo -e "${lor7}[${lor2}5${lor7}] ${lor3}==>${lor7} CHANGE PATH "
echo -e "${lor7}[${lor2}6${lor7}] ${lor3}==>${lor7} CHANGE ALERT-ID "
echo -e "${lor7}[${lor2}7${lor7}] ${lor3}==>${lor7} $serv2 " 
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opci
echo
if [ "$opci" = "1" ];then
if [ -f /etc/v2ray/config.json ];then
echo -e "${lor1} ALREADY INSTALLED ${lor7}"
else
echo -e "${lor7} Verify Domain ${lor6}"
read -p " :" dom
[[ "$dom" = "" ]]&& dom="fb.com"
IPSEC=$(wget -qO- whatismyip.akamai.com)
very=$(host ${dom} |awk -F "address" 'NR==1{print $2}'|tr -d '[[:space:]]')
if [ "$very" = "$IPSEC" ];then
echo;echo -e "${lor2} Verified domain ${lor7}"
echo;echo -e "${lor7} Write your port ${lor6}"
read -p " :" ports
if (echo $ports | egrep '[^0-9]' &> /dev/null);then
echo;echo -e "${lor1}  YOU MUST ENTER A NUMBER" 
else
if lsof -Pi :$ports -sTCP:LISTEN -t >/dev/null ; then
echo;echo -e "${lor1}  THE PORT IS ALREADY IN USE"  
else
echo;echo -e "${lor7} PATH (default=/Protokill) ${lor6}"
read -p " :" patxd
[[ "$patxd" = "" ]]&& patxd="Protokill"
insv2ray (){
apt-get install uuid-runtime -y
apt install bc -y
rm -rf /etc/v2ray
mkdir -p /etc/v2ray/
cd /etc/v2ray/
wget https://www.dropbox.com/s/1akq5zq1ytuzbwb/v2ray-linux-64.zip
unzip v2ray-linux-64.zip
rm -rf v2ray-linux-64.zip
mv v2raypro /bin/v2raypro
chmod +x /bin/v2raypro
}
echo;echo -e "${lor3}             INSTALLING V2RAY WEBSOCKET ${lor7}"
fun_bar 'insv2ray'
UUID=`uuidgen`
cat <<EOF > /etc/v2ray/config.json
{
    "log": {
        "loglevel": "debug"
    },
    "inbounds": [{
      "port": ${ports}, 
      "protocol": "vmess",
      "settings": {
        "clients": [ 
            { "id": "${UUID}", "alterId":32, "level":1 }
        ]
      },
      "streamSettings": {
          "network":"ws",
          "wsSettings": {
            "headers": {
            "host":"$dom" 
            },
            "path":"/${patxd}"
          }
      }
    }],
    "outbounds": [{
      "protocol": "freedom",
      "settings": {}
    }]
}
EOF
screen -dmS v2ser v2raypro -config /etc/v2ray/config.json >/dev/null 2>&1
echo -e "${lor2} V2RAY INSTALLED SUCCESSFULLY ${lor7}"


fi
fi
else
echo -e "${lor1} The domain I entered is not pointing to its ip ${lor7}"
fi
fi

fi

if [ "$opci" = "2" ];then
if [ -f /etc/v2ray/config.json ];then
rm -rf /etc/v2ray
rm -rf /bin/v2raypro
echo "" >/etc/prokill/RegV2ray
screen -r -S "v2ser" -X quit >/dev/null 2>&1
screen -wipe > /dev/null 2>&1
echo -e "${lor2} V2RAY WAS REMOVED ${lor7}"
else
echo -e "${lor1} V2RAY NOT INSTALLED ${lor7}"
fi
fi

if [ "$opci" = "3" ];then
if [ -f /etc/v2ray/config.json ];then
domain=$(cat /etc/v2ray/config.json |grep -w "host"|awk -F : '{print $2}'|sed 's;";;g')
echo -e "${lor6} CURRENT DOMAIN = ${lor7}${domain}"
echo
read -p " Change Domain : " doms
[[ "$doms" = "" ]]&& doms="fb.com"
IPSEC=$(wget -qO- whatismyip.akamai.com)
very=$(host ${doms} |awk -F "address" 'NR==1{print $2}'|tr -d '[[:space:]]')
if [ "$very" = "$IPSEC" ];then
echo;echo -e "${lor2} Verified domain ${lor7}"
ef=$(sed -n '/'host'/=' /etc/v2ray/config.json)
sed -i "${ef}d" /etc/v2ray/config.json
sed -i "$ef i\           \ "'"'"host"'"'":"'"'"$doms"'"'" " /etc/v2ray/config.json
screen -r -S "v2ser" -X quit >/dev/null 2>&1
screen -wipe > /dev/null 2>&1
screen -dmS v2ser v2raypro -config /etc/v2ray/config.json >/dev/null 2>&1
echo;echo -e "${lor2} YOUR NEW DOMAIN IS $doms ${lor7}"
else
echo -e "${lor1} The domain I entered is not pointing to its ip ${lor7}"
fi
else
echo -e "${lor1} V2RAY NOT INSTALLED ${lor7}"
fi
fi

if [ "$opci" = "4" ];then
if [ -f /etc/v2ray/config.json ];then
portf=$(cat /etc/v2ray/config.json |grep -w "port"|awk -F : '{print $2}'|sed 's;,;;g'|tr -d '[[:space:]]')
echo -e "${lor6} CURRENT PORT = ${lor7}${portf}"
echo
read -p " Change port : " portv
[[ "$portv" = "" ]]&& portv="8080"
if (echo $portv | egrep '[^0-9]' &> /dev/null);then
echo;echo -e "${lor1}  YOU MUST ENTER A NUMBER" 
else
if lsof -Pi :$portv -sTCP:LISTEN -t >/dev/null ; then
echo;echo -e "${lor1}  THE PORT IS ALREADY IN USE"  
else
ef=$(sed -n '/'port'/=' /etc/v2ray/config.json)
sed -i "${ef}d" /etc/v2ray/config.json
sed -i "$ef i\     \ "'"'"port"'"'": $portv, " /etc/v2ray/config.json
screen -r -S "v2ser" -X quit >/dev/null 2>&1
screen -wipe > /dev/null 2>&1
screen -dmS v2ser v2raypro -config /etc/v2ray/config.json >/dev/null 2>&1
echo;echo -e "${lor2} YOUR NEW PORT IS :$portv ${lor7}"
fi;fi
else
echo -e "${lor1} V2RAY NOT INSTALLED ${lor7}"

fi
fi

if [ "$opci" = "5" ];then
if [ -f /etc/v2ray/config.json ];then
path=$(cat /etc/v2ray/config.json |grep -w "path"|awk -F : '{print $2}'|sed 's;";;g')
echo -e "${lor6} CURRENT PATH = ${lor7}${path}"
echo
read -p " Change path : " pd
[[ "$pd" = "" ]]&& pd="protokill"
ef=$(sed -n '/'path'/=' /etc/v2ray/config.json)
sed -i "${ef}d" /etc/v2ray/config.json
sed -i "$ef i\           \ "'"'"path"'"'":"'"'"/$pd"'"'" " /etc/v2ray/config.json
screen -r -S "v2ser" -X quit >/dev/null 2>&1
screen -wipe > /dev/null 2>&1
screen -dmS v2ser v2raypro -config /etc/v2ray/config.json >/dev/null 2>&1
echo;echo -e "${lor2} YOUR NEW PATH IS :$pd"
else
echo -e "${lor1} V2RAY NOT INSTALLED ${lor7}"
fi
fi

if [ "$opci" = "6" ];then
if [ -f /etc/v2ray/config.json ];then
alertv2=$(cat /etc/v2ray/config.json |grep -w "alterId"|awk -F : 'NR==1{print $3}'|sed 's;, "level";;g')
echo -e "${lor6} CURRENT ALERT-ID = ${lor7}${alertv2}"
echo
read -p " Change AlertId : " alid
[[ "$alid" = "" ]]&& alid="32"
sed -i "s;$alertv2;$alid;g" /etc/v2ray/config.json
screen -r -S "v2ser" -X quit >/dev/null 2>&1
screen -wipe > /dev/null 2>&1
screen -dmS v2ser v2raypro -config /etc/v2ray/config.json >/dev/null 2>&1
echo;echo -e "${lor2} YOUR NEW ALERT-ID IS:$alid "
else
echo -e "${lor1} V2RAY NOT INSTALLED ${lor7}"
fi
fi

if [ "$opci" = "7" ];then
if [ -f /etc/v2ray/config.json ];then
if ps -A |grep -w "v2raypro" >/dev/null;then
screen -r -S "v2ser" -X quit >/dev/null 2>&1
screen -wipe > /dev/null 2>&1
echo -e "${lor1} SERVICE STOPPED ${lor7}"
else
screen -dmS v2ser v2raypro -config /etc/v2ray/config.json >/dev/null 2>&1
echo -e "${lor2} SERVICE STARTED ${lor7}"
fi
else
echo -e "${lor1} V2RAY NOT INSTALLED ${lor7}"
fi
fi
espe
esac
;;
6)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                    TOOLS | ETC "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} SEE ALL ACTIVE PORTS  "
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} BANNER /SSH/DROPBEAR/SSL "
echo -e "${lor7}[${lor2}3${lor7}] ${lor3}==>${lor7} INFOIP "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opci

if [ "$opci" = "1" ];then
clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}               SEE ALL ACTIVE PORTS "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
netstat -tnpl
fi

if [ "$opci" = "2" ];then
clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}              BANNER /SSH/DROPBEAR/SSL "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor7}[${lor2}1${lor7}] ${lor3}==>${lor7} ADD BANNER  "
echo -e "${lor7}[${lor2}2${lor7}] ${lor3}==>${lor7} REMOVE BANNER "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
read -p "SELECT OPTION :" opb
if [ "$opb" = "1" ];then
echo;echo -e " ENTER YOUR BANNER WITHOUT JUMPS " && read -p ":" baneer
echo "$baneer" > /etc/prokill/banner
refv(){
if [ -f /etc/default/dropbear ];then
[[ $(cat /etc/default/dropbear |grep "DROPBEAR_BANNER") ]] && echo ""|| echo 'DROPBEAR_BANNER="/etc/prokill/banner"' >> /etc/default/dropbear
fi
[[ $(cat /etc/ssh/sshd_config |grep "Banner") ]] && echo ""|| echo "Banner /etc/prokill/banner" >> /etc/ssh/sshd_config
service dropbear stop 2>/dev/null
service ssh restart 2>/dev/null
service dropbear restart 2>/dev/null
}
echo;echo -e "${lor3}               RESTARTING SERVICES ${lor7}"
fun_bar 'refv'
echo;echo -e "${lor2} ADDED BANNER ${lor7}"
fi

if [ "$opb" = "2" ];then
recbaner () {
cat /etc/ssh/sshd_config | grep -v "Banner" > /tmp/banner && cat /tmp/banner > /etc/ssh/sshd_config
cat /etc/default/dropbear | grep -v "DROPBEAR_BANNER" > /tmp/banner && cat /tmp/banner > /etc/default/dropbear
rm -rf  /etc/prokill/banner
service dropbear stop 2>/dev/null
service ssh restart 2>/dev/null
service dropbear restart 2>/dev/null
}
recbaner &> /dev/null
echo;echo -e "${lor2} REMOVED BANNER ${lor7}"
fi
fi
if [ "$opci" = "3" ];then
echo -e "${lor6}"
ipp=$(wget -qO- whatismyip.akamai.com)
wget -qO- http://api.hackertarget.com/geoip/?q=${ipp}
echo -e "${lor7}"
fi

espe
;;
7)clear&&clear
echo -e "${lor4}***************************************************${lor7}"
echo -e "${lor2}                      CREDITS "
echo -e "${lor1}===================================================${lor7} "
echo -e "${lor4}$b ${lor7}"
echo -e "${lor7}      Mini Script Panel created by @KillShito "
echo -e "${lor1}[-]â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”[-]${lor7}"
echo -e "${lor5} SCRIPT DEVELOPER CREDITS:${lor7}@killshito "
echo -e "${lor5} SSH OVER WEBSOCKET CDN CLOUDFLARE:${lor7}@PANCHO7532 "
echo -e "${lor1} PROHIBIDA SU VENTA,SALE FORBIDDEN"
echo
echo -e "${lor3} SI TE VENDIERON ESTE SCRIPT FUISTE ESTAFADO "
echo -e "${lor3} IF THEY SOLD YOU THIS SCRIPT YOU WERE SCAMMED "
espe
;;
8)exit;;
esac
done
